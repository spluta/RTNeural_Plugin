#N canvas 155 45 705 267 12;
#N canvas 595 246 729 578 trigger_mode 0;
#X obj 184 354 tgl 30 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X msg 184 389 bypass \$1;
#X obj 211 83 noise~;
#N canvas 0 0 450 300 (subpatch) 0;
#X array \$0-trig_array 10 float 2;
#A color 0;
#A width 2;
#X coords 0 1 10 0 403 199 1 0 0;
#X restore 291 361 graph;
#X obj 47 94 osc~ 0.1;
#X obj 46 119 *~ 0.5;
#X obj 46 144 +~ 0.5;
#X obj 112 119 *~ 0.5;
#X obj 112 144 +~ 0.5;
#N canvas 121 146 660 377 set_array 0;
#X obj 121 76 snake~ out 10, f 31;
#X obj 381 77 metro 2;
#X obj 392 35 loadbang;
#X obj 364 35 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 121 116 snapshot~;
#X obj 142 142 snapshot~;
#X obj 167 172 snapshot~;
#X obj 191 200 snapshot~;
#X obj 223 228 snapshot~;
#X obj 220 117 snapshot~;
#X obj 241 143 snapshot~;
#X obj 266 173 snapshot~;
#X obj 290 201 snapshot~;
#X obj 322 229 snapshot~;
#X obj 104 274 pack 1 1 1 1 1 1 1 1 1 1;
#X listbox 104 298 84 0 0 0 - - - 0;
#X obj 121 39 inlet~;
#X obj 96 333 array set \$0-trig_array;
#X connect 0 0 4 0;
#X connect 0 1 5 0;
#X connect 0 2 6 0;
#X connect 0 3 7 0;
#X connect 0 4 8 0;
#X connect 0 5 9 0;
#X connect 0 6 10 0;
#X connect 0 7 11 0;
#X connect 0 8 12 0;
#X connect 0 9 13 0;
#X connect 1 0 4 0;
#X connect 1 0 5 0;
#X connect 1 0 6 0;
#X connect 1 0 7 0;
#X connect 1 0 8 0;
#X connect 1 0 9 0;
#X connect 1 0 10 0;
#X connect 1 0 11 0;
#X connect 1 0 12 0;
#X connect 1 0 13 0;
#X connect 2 0 1 0;
#X connect 3 0 1 0;
#X connect 4 0 14 0;
#X connect 5 0 14 1;
#X connect 6 0 14 2;
#X connect 7 0 14 3;
#X connect 8 0 14 4;
#X connect 9 0 14 5;
#X connect 10 0 14 6;
#X connect 11 0 14 7;
#X connect 12 0 14 8;
#X connect 13 0 14 9;
#X connect 14 0 15 0;
#X connect 15 0 17 0;
#X connect 16 0 0 0;
#X restore 20 258 pd set_array;
#X obj 113 94 osc~ 0.2;
#X obj 212 108 -~ 0.9999;
#X text 289 101 triggers the function when the output of this value is greater than 0, f 38;
#X obj 185 278 tgl 30 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X msg 185 313 trigger_mode \$1;
#X text 184 224 trigger mode can be set by a 4th creation argument or a trigger_mode message, f 27;
#X obj 186 164 loadbang;
#X text 101 18 Setting trigger_mode to 1 allows the audio rate function to be triggered by an additional input channel. This allows inference to happen at any sample \, but not every sample., f 73;
#X obj 20 233 rtneural~ 2 10 -1 1;
#X obj 59 459 tgl 30 0 empty empty DSP\ on/off 0 -10 0 12 #ffc7c6 #000000 #000000 0 1;
#X obj 59 494 switch~;
#X obj 80 175 snake~;
#X msg 186 189 load_model saved_models/mlp/mlp_training_RTNeural.json;
#X connect 0 0 1 0;
#X connect 1 0 18 0;
#X connect 2 0 11 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 21 0;
#X connect 7 0 8 0;
#X connect 8 0 21 1;
#X connect 10 0 7 0;
#X connect 11 0 18 1;
#X connect 13 0 14 0;
#X connect 14 0 18 0;
#X connect 16 0 22 0;
#X connect 18 0 9 0;
#X connect 19 0 20 0;
#X connect 21 0 18 0;
#X connect 22 0 18 0;
#X restore 40 133 pd trigger_mode;
#N canvas 562 261 795 549 wavetable 0;
#X floatatom 86 187 5 0 0 0 - - - 0;
#X obj 258 32 vsl 19 162 0 1 0 0 empty empty empty 0 -9 0 12 #dfdfdf #000000 #000000 0 1;
#X floatatom 258 203 7 0 0 0 - - - 0;
#X obj 258 228 sig~;
#X obj 96 236 snake~ in 2;
#X obj 96 281 rtneural~ 2 1;
#X obj 96 211 phasor~ 200;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-wavetable_out 4410 float 0;
#A color 0;
#A width 1;
#X coords 0 1 4409 -1 200 100 1 0 0;
#X restore 117 399 graph;
#X obj 31 479 metro 100;
#X obj 31 453 loadbang;
#X obj 96 306 output~;
#X obj 320 202 loadbang;
#X text 299 150 This MLP is trained on a variable wavetable oscillator. Adjust the fader to move through the wavetable. All interpolation is done by the neural network., f 62;
#X text 83 166 oscillator frequency;
#X obj 320 265 tgl 30 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X floatatom 320 300 5 0 0 0 - - - 0;
#X msg 320 324 bypass \$1;
#X text 359 274 bypass/engage;
#X obj 31 505 tabwrite~ \$0-wavetable_out;
#X obj 34 49 tgl 30 0 empty empty DSP\ on/off 0 -10 0 12 #ffc7c6 #000000 #000000 0 1;
#X obj 34 84 switch~;
#X msg 320 228 load_model saved_models/mlp/4Osc_torch_RTNeural.json;
#X connect 0 0 6 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 1;
#X connect 4 0 5 0;
#X connect 5 0 10 0;
#X connect 5 0 18 0;
#X connect 6 0 4 0;
#X connect 8 0 18 0;
#X connect 9 0 8 0;
#X connect 11 0 21 0;
#X connect 14 0 15 0;
#X connect 15 0 16 0;
#X connect 16 0 5 0;
#X connect 19 0 20 0;
#X connect 21 0 5 0;
#X restore 61 163 pd wavetable;
#X text 160 133 <-- learn about a 4th creation argument: trigger_mode;
#N canvas 496 241 916 588 distortion 0;
#X obj 343 21 vsl 19 162 0 1 0 0 empty empty empty 0 -9 0 12 #dfdfdf #000000 #000000 0 1;
#X floatatom 343 192 8 0 0 0 - - - 0;
#X obj 343 217 sig~;
#X obj 228 248 snake~ in 2;
#X obj 228 300 rtneural~ 2 1 44100;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-lstm_dist 4410 float 0;
#A color 0;
#A width 1;
#X coords 0 1 4409 -1 200 100 1 0 0;
#X restore 246 421 graph;
#X obj 165 501 metro 100;
#X obj 165 476 loadbang;
#X obj 165 526 tabwrite~ \$0-lstm_dist;
#X obj 229 325 output~;
#X obj 412 191 loadbang;
#X obj 412 258 tgl 30 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X floatatom 412 293 5 0 0 0 - - - 0;
#X msg 412 317 bypass \$1;
#X text 451 267 bypass/engage;
#X text 391 148 this model accepts a second input channel for the distortion effect's gain \, which can be controlled by the fader;
#X obj 156 41 tgl 30 0 empty empty DSP\ on/off 0 -10 0 12 #ffc7c6 #000000 #000000 0 1;
#X obj 156 76 switch~;
#X msg 412 217 load_model saved_models/rnn_distortion/DOD_AmericanMetal_GainKnob_RTNeural.json, f 69;
#X obj 18 184 osc~ 200;
#X floatatom 18 160 5 0 0 0 - - - 0;
#X obj 69 262 *~ 1;
#X obj 94 200 hradio 30 1 0 2 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0;
#X text 17 140 input sine frequency;
#X obj 94 236 == 0;
#X obj 176 262 == 1;
#N canvas 32 102 450 300 loop 0;
#X obj 90 160 soundfiler;
#X obj 90 85 loadbang;
#N canvas 0 25 994 611 (subpatch) 0;
#X array \$0-loop2 100000 float 2;
#A color 0;
#A width 2;
#X coords 0 1 100000 -1 250 100 1 0 0;
#X restore 160 30 graph;
#X obj 19 135 loadbang;
#X obj 19 185 tabplay~ \$0-loop;
#X obj 90 110 f \$0;
#X obj 19 160 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 19 210 outlet~;
#X msg 90 135 read ../doc/sound/voice.wav \$1-loop2;
#X connect 1 0 5 0;
#X connect 3 0 6 0;
#X connect 4 0 7 0;
#X connect 4 1 6 0;
#X connect 5 0 8 0;
#X connect 6 0 4 0;
#X connect 8 0 0 0;
#X coords 0 0 1 1 85 60 0;
#X restore 112 262 pd loop;
#X obj 151 288 *~ 0;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 1;
#X connect 3 0 4 0;
#X connect 4 0 8 0;
#X connect 4 0 9 0;
#X connect 6 0 8 0;
#X connect 7 0 6 0;
#X connect 10 0 18 0;
#X connect 11 0 12 0;
#X connect 12 0 13 0;
#X connect 13 0 4 0;
#X connect 16 0 17 0;
#X connect 18 0 4 0;
#X connect 19 0 21 0;
#X connect 20 0 19 0;
#X connect 21 0 3 0;
#X connect 22 0 24 0;
#X connect 22 0 25 0;
#X connect 24 0 21 1;
#X connect 25 0 27 1;
#X connect 26 0 27 0;
#X connect 27 0 3 0;
#X restore 54 194 pd distortion;
#X text 160 194 <-- example using [rtneural~] as a distortion with gain control, f 63;
#N canvas 75 406 1111 476 intro 0;
#X obj 455 81 osc~ 200;
#X floatatom 455 57 5 0 0 0 - - - 0;
#X obj 561 225 tgl 30 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X obj 506 159 *~ 1;
#X obj 531 97 hradio 30 1 0 2 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-neural_out 4410 float 0;
#A color 0;
#A width 1;
#X coords 0 1 4409 -1 200 100 1 0 0;
#X restore 34 348 graph;
#X obj 34 282 metro 100;
#X obj 34 256 loadbang;
#X obj 34 308 tabwrite~ \$0-neural_out;
#X obj 230 220 rtneural~ 1 1 44100;
#X msg 561 284 bypass \$1;
#X floatatom 561 260 5 0 0 0 - - - 0;
#X text 454 37 input sine frequency;
#X obj 531 133 == 0;
#X obj 613 159 == 1;
#N canvas 1098 48 270 968 loop 0;
#X obj 90 160 soundfiler;
#X obj 90 85 loadbang;
#N canvas 0 25 994 611 (subpatch) 0;
#X array \$0-loop 100000 float 2;
#A color 0;
#A width 2;
#X coords 0 1 100000 -1 250 100 1 0 0;
#X restore 160 30 graph;
#X obj 19 135 loadbang;
#X obj 19 185 tabplay~ \$0-loop;
#X obj 90 110 f \$0;
#X msg 90 135 read ../doc/sound/voice.wav \$1-loop;
#X obj 19 160 bng 20 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 19 210 outlet~;
#X connect 1 0 5 0;
#X connect 3 0 7 0;
#X connect 4 0 8 0;
#X connect 4 1 7 0;
#X connect 5 0 6 0;
#X connect 6 0 0 0;
#X connect 7 0 4 0;
#X coords 0 0 1 1 85 60 0;
#X restore 549 159 pd loop;
#X obj 244 308 output~;
#X obj 588 185 *~ 0;
#X text 601 92 [rtneural~] expects an input signal of the declared channel count. This patch lets you choose between a sine wave (left cell) or speech sample (right cell).;
#X text 601 219 set whether [rtneural~]'s signal processing is bypassed (if set to 1 \, the input signal is passed through unaffected), f 43;
#X text 16 138 [rtneural~] runs inference from a pre-trained neural net on a multichannel input signal. It accepts three main creation arguments: input channel count \, output channel count \, and sample rate., f 69;
#X obj 34 50 tgl 30 0 empty empty DSP\ on/off 0 -10 0 12 #ffc7c6 #000000 #000000 0 1;
#X obj 34 84 switch~;
#X text 601 320 Load the model file at the given (relative or absolute) path. The model must satisfy [rtneural~]'s channel counts., f 61;
#X text 603 365 A model trained on a TS9 guitar pedal., f 61;
#X text 94 79 due to the internal arrays in the external \, rtneural can reblock down but not up, f 43;
#X msg 603 387 load_model saved_models/rnn_distortion/TS9_HighDrive_RTNeural.json, f 67;
#X connect 0 0 3 0;
#X connect 1 0 0 0;
#X connect 2 0 11 0;
#X connect 3 0 9 0;
#X connect 4 0 13 0;
#X connect 4 0 14 0;
#X connect 6 0 8 0;
#X connect 7 0 6 0;
#X connect 9 0 8 0;
#X connect 9 0 16 0;
#X connect 10 0 9 0;
#X connect 11 0 10 0;
#X connect 13 0 3 1;
#X connect 14 0 17 1;
#X connect 15 0 17 0;
#X connect 17 0 9 0;
#X connect 21 0 22 0;
#X connect 26 0 9 0;
#X restore 89 73 pd intro;
#X text 159 73 <-- an introduction to [rtneural~];
#X obj 82 20 rtneural~;
#X text 155 20 is an interface for real-time neural net inference. Look through these examples to understand how it works:, f 64;
#N canvas 236 217 1496 578 rnn_trigger_mode 1;
#X obj 911 352 tgl 30 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X msg 911 387 bypass \$1;
#N canvas 0 0 450 300 (subpatch) 0;
#X array \$0-softmax_tilde 20 float 2;
#A color 0;
#A width 2;
#X coords 0 1 20 0 300 199 1 0 0;
#X restore 1132 343 graph;
#N canvas 245 70 1251 462 set_array 0;
#X obj 1154 76 metro 2;
#X obj 1165 34 loadbang;
#X obj 1137 34 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 974 148 snapshot~;
#X obj 995 174 snapshot~;
#X obj 1020 204 snapshot~;
#X obj 1044 232 snapshot~;
#X obj 1076 260 snapshot~;
#X obj 1073 149 snapshot~;
#X obj 1094 175 snapshot~;
#X obj 1119 205 snapshot~;
#X obj 1143 233 snapshot~;
#X obj 1175 261 snapshot~;
#X listbox 104 298 84 0 0 0 - - - 0;
#X obj 121 14 inlet~;
#X obj 96 333 array set \$0-softmax_tilde;
#X obj 121 51 snake~ out 84, f 142;
#X obj 816 312 pack 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1;
#X obj 692 121 snapshot~;
#X obj 713 147 snapshot~;
#X obj 738 177 snapshot~;
#X obj 762 205 snapshot~;
#X obj 794 233 snapshot~;
#X obj 791 122 snapshot~;
#X obj 812 148 snapshot~;
#X obj 837 178 snapshot~;
#X obj 861 206 snapshot~;
#X obj 893 234 snapshot~;
#X connect 0 0 3 0;
#X connect 0 0 4 0;
#X connect 0 0 5 0;
#X connect 0 0 6 0;
#X connect 0 0 7 0;
#X connect 0 0 8 0;
#X connect 0 0 9 0;
#X connect 0 0 10 0;
#X connect 0 0 11 0;
#X connect 0 0 12 0;
#X connect 0 0 27 0;
#X connect 0 0 26 0;
#X connect 0 0 25 0;
#X connect 0 0 24 0;
#X connect 0 0 23 0;
#X connect 0 0 22 0;
#X connect 0 0 21 0;
#X connect 0 0 20 0;
#X connect 0 0 19 0;
#X connect 0 0 18 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 17 10;
#X connect 4 0 17 11;
#X connect 5 0 17 12;
#X connect 6 0 17 13;
#X connect 7 0 17 14;
#X connect 8 0 17 15;
#X connect 9 0 17 16;
#X connect 10 0 17 17;
#X connect 11 0 17 18;
#X connect 12 0 17 19;
#X connect 13 0 15 0;
#X connect 14 0 16 0;
#X connect 16 64 18 0;
#X connect 16 65 19 0;
#X connect 16 66 20 0;
#X connect 16 67 21 0;
#X connect 16 68 22 0;
#X connect 16 69 23 0;
#X connect 16 70 24 0;
#X connect 16 71 25 0;
#X connect 16 72 26 0;
#X connect 16 73 27 0;
#X connect 16 74 3 0;
#X connect 16 75 4 0;
#X connect 16 76 5 0;
#X connect 16 77 6 0;
#X connect 16 78 7 0;
#X connect 16 79 8 0;
#X connect 16 80 9 0;
#X connect 16 81 10 0;
#X connect 16 82 11 0;
#X connect 16 83 12 0;
#X connect 17 0 13 0;
#X connect 18 0 17 0;
#X connect 19 0 17 1;
#X connect 20 0 17 2;
#X connect 21 0 17 3;
#X connect 22 0 17 4;
#X connect 23 0 17 5;
#X connect 24 0 17 6;
#X connect 25 0 17 7;
#X connect 26 0 17 8;
#X connect 27 0 17 9;
#X restore 730 325 pd set_array;
#X obj 912 276 tgl 30 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X msg 912 311 trigger_mode \$1;
#X obj 377 164 loadbang;
#X obj 59 459 tgl 30 0 empty empty DSP\ on/off 0 -10 0 12 #ffc7c6 #000000 #000000 0 1;
#X obj 59 494 switch~;
#X obj 747 231 rtneural~ 1 84 -1 1;
#N canvas 469 494 450 278 (subpatch) 0;
#X array \$0-softmax 20 float 3;
#A 0 9.17997e-12 2.00949e-11 7.95383e-06 1.00562e-06 1.59291e-11 0.00477874 1.35611e-11 0.00142172 0.0321684 0.000869481 0.0127941 1.82186e-11 0.897058 1.85453e-11 0.00128696 0.0277117 2.42022e-11 0.0219022 1.83191e-11 3.04622e-15;
#A color 0;
#A width 2;
#X coords 0 1 20 0 300 200 1 0 0;
#X restore 1129 104 graph;
#X obj 411 418 t b l;
#X obj 411 376 rtneural 1 84;
#X msg 627 318 reset;
#N canvas 323 154 1173 672 get_5 0;
#X obj 70 6 inlet;
#X msg 70 76 79 79 81 79 81 83 81 79 78 76 74 67 66 67 69 67 66 67 69 67 69 67 69 67 69 67 69 67 66 67 69 67 66 67 66 64 64 62 74 74 76 74 76 77 76 74 72 71 69 79 78 76 78 79 78 81 79 78 76 74 72 72 81 72 71 67 66 66 67 66 67 71 71 73 71 73 74 74 73 71 69 67 71 76 79 81 79 78 79 81 79 81 79 81 79 81 79 81 79 78 79 79 78 76 74 73 71 73 74 73 74 73 74 73 76 81 79 78 76 74 69 71 72 71 69 67 66 64 74 73 74 76 74 73 71 69 79 71 73 73 74 76 74 73 73 74 69 67 69 71 69 67 69 71 69 71 69 71 69 71 69 71 69 71 72 74 76 76 74 72 71 69 67 79 78 76 78 75 75 76 75 76 81 83 81 79 81 78 76 75 71 76 78 79 78 78 76 71 72 71 69 71 79 76 78 75 75 76 67 66 64 66 76 76 75 78 79 81 79 78 78 76 78 75 75 76 76 74 72 71 69 71 72 74 72 71 72 71 69 69 67 69 71 72 74 72 71 72 69 64 69 72 74 72 71 72 69 66 69 72 76 74 72 71 72 71 69 71 67 62 67 71 67 72 74 76 77 76 74 76 72 67 72 76 72 78 79 81 72 71 69 71 72 74 67 71 69 67 66 67 62 67 66 66 67 69 67 69 71 69 67 69 71 69 71 69 71 69 71 69 71 69 71 72 74 76 76 74 72 71 69 67 79 78 76 78 75 75 76 75 76 81 83 81 79 81 78 76 75 71 76 78 79 78 78 76 71 72 71 69 71 79 76 78 75 75 76 67 66 64 66 76 76 75 78 79 81 79 78 78 76 78 75 75 76 76 74 72 71 69 71 72 74 72 71 72 71 69 69 67 69 71 72 74 72 71 72 69 64 69 72 74 72 71 72 69 66 69 72 76 74 72 71 72 71 69 71 67 62 67 71 67 72 74 76 77 76 74 76 72 67 72 76 72 78 79 81 72 71 69 71 72 74 67 71 69 67 66 67 62 67 66 66 67;
#X obj 54 831 list split;
#X obj 80 502 list split;
#X obj 158 426 random 70;
#X obj 155 464 + 5;
#X listbox 200 575 29 0 0 0 - - - 0;
#X obj 179 16 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 64 841 list split;
#X obj 98 540 list split 5;
#X obj 568 156 until;
#X obj 577 270 list store;
#X obj 568 181 f;
#X obj 606 182 + 1;
#X msg 625 156 0, f 2;
#X msg 564 243 get \$1 1;
#X obj 595 294 / 83;
#X obj 586 410 list store;
#X msg 595 384 set \$2 \$1;
#X obj 579 322 pack;
#X obj 566 212 t f f;
#X obj 589 349 t b l;
#X obj 602 123 t b b l b, f 25;
#X obj 103 619 outlet;
#X obj 628 523 outlet;
#X listbox 717 516 47 0 0 0 - - - 0;
#X obj 70 42 t b b b;
#X connect 0 0 26 0;
#X connect 1 0 3 0;
#X connect 3 1 9 0;
#X connect 4 0 5 0;
#X connect 5 0 3 1;
#X connect 7 0 26 0;
#X connect 9 0 6 0;
#X connect 9 0 23 0;
#X connect 9 0 22 0;
#X connect 10 0 12 0;
#X connect 11 0 16 0;
#X connect 11 1 10 1;
#X connect 12 0 13 0;
#X connect 12 0 20 0;
#X connect 13 0 12 1;
#X connect 14 0 12 1;
#X connect 15 0 11 0;
#X connect 16 0 19 0;
#X connect 17 0 24 0;
#X connect 17 0 25 0;
#X connect 18 0 17 0;
#X connect 19 0 21 0;
#X connect 20 0 15 0;
#X connect 20 1 19 1;
#X connect 21 1 18 0;
#X connect 22 0 10 0;
#X connect 22 1 14 0;
#X connect 22 2 11 1;
#X connect 22 2 17 1;
#X connect 22 3 17 1;
#X connect 26 0 17 0;
#X connect 26 1 1 0;
#X connect 26 2 4 0;
#X restore 96 139 pd get_5;
#X obj 150 63 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X listbox 17 265 43 0 0 0 - - - 0;
#X listbox 18 194 43 0 0 0 - - - 0;
#X obj 798 103 sig~;
#X obj 792 23 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 804 76 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 498 491 array set \$0-softmax;
#X obj 513 418 print;
#X listbox 359 271 43 0 0 0 - - - 0;
#X obj 172 100 t b b;
#X obj 468 82 unpack 1 1 1 1 1, f 25;
#X obj 468 117 sig~;
#X obj 511 117 sig~;
#X obj 553 117 sig~;
#X obj 598 117 sig~;
#X obj 640 117 sig~;
#X obj 537 149 snake~ 5;
#X msg 797 52 1;
#X msg 854 67 0;
#X text 1057 71 the last 20 outputs of rtneural and rtneural~ softmax;
#X obj 487 457 list split 64;
#X obj 854 39 delay 10;
#X text 909 221 trigger mode needs to be on for rtneural~ to react to bang messages;
#X text 921 36 send a reset and a trigger to the audio rate process to process the N input values;
#X text 78 10 this shows that rtneural~ gives the same outputs as rtneural when given a list of N values \, a reset \, and a trigger, f 61;
#X msg 377 195 load_model saved_models/lstm_note_prediction/bach_RTNeural.json, f 63;
#X text 177 57 bang to trigger inference on both pd and ~ externals, f 28;
#X connect 0 0 1 0;
#X connect 1 0 9 0;
#X connect 4 0 5 0;
#X connect 5 0 9 0;
#X connect 6 0 40 0;
#X connect 7 0 8 0;
#X connect 9 0 3 0;
#X connect 12 0 11 0;
#X connect 12 0 22 0;
#X connect 12 0 35 0;
#X connect 13 0 12 0;
#X connect 14 0 17 0;
#X connect 14 1 16 0;
#X connect 14 1 25 0;
#X connect 15 0 24 0;
#X connect 16 0 12 0;
#X connect 18 0 9 1;
#X connect 18 0 9 2;
#X connect 19 0 32 0;
#X connect 19 0 36 0;
#X connect 20 0 18 0;
#X connect 24 0 14 0;
#X connect 24 0 19 0;
#X connect 24 1 13 0;
#X connect 25 0 26 0;
#X connect 25 1 27 0;
#X connect 25 2 28 0;
#X connect 25 3 29 0;
#X connect 25 4 30 0;
#X connect 26 0 31 0;
#X connect 27 0 31 1;
#X connect 28 0 31 2;
#X connect 29 0 31 3;
#X connect 30 0 31 4;
#X connect 31 0 9 0;
#X connect 32 0 20 0;
#X connect 33 0 20 0;
#X connect 35 1 21 0;
#X connect 36 0 33 0;
#X connect 40 0 9 0;
#X connect 40 0 12 0;
#X restore 13 225 pd rnn_trigger_mode;
#X text 160 163 <-- example using [rtneural~] as an mlp-based variable wavetable oscillator, f 76;
#X text 161 225 <-- rnns in trigger mode can process a time series on the audio thread, f 72;
#N canvas 770 36 885 393 gru_saw 0;
#X obj 155 76 osc~ 200;
#X floatatom 155 52 5 0 0 0 - - - 0;
#X obj 585 107 tgl 30 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-grusaw_out 4410 float 0;
#A color 0;
#A width 1;
#X coords 0 1 4409 -1 200 100 1 0 0;
#X restore 34 278 graph;
#X obj 34 212 metro 100;
#X obj 34 186 loadbang;
#X msg 585 166 bypass \$1;
#X floatatom 585 142 5 0 0 0 - - - 0;
#X text 154 32 input sine frequency;
#X obj 244 238 output~;
#X obj 34 50 tgl 30 0 empty empty DSP\ on/off 0 -10 0 12 #ffc7c6 #000000 #000000 0 1;
#X obj 34 84 switch~;
#X text 436 190 A model trained to transform a sine wave into an anti-aliased sawtooth wave., f 61;
#X msg 436 223 load_model saved_models/rnn_distortion/GRU16c_RTNeural.json;
#X obj 230 150 rtneural~ 1 1;
#X obj 34 238 tabwrite~ \$0-grusaw_out;
#X text 233 112 this patch does not need internal resampling \, so the sample rate argument can be ignored, f 46;
#X connect 0 0 14 0;
#X connect 1 0 0 0;
#X connect 2 0 7 0;
#X connect 4 0 15 0;
#X connect 5 0 4 0;
#X connect 6 0 14 0;
#X connect 7 0 6 0;
#X connect 10 0 11 0;
#X connect 13 0 14 0;
#X connect 14 0 9 0;
#X connect 14 0 15 0;
#X restore 75 103 pd gru_saw;
#X text 159 104 <-- a GRU trained to convert a sine wave into an anti-aliased sawtooth, f 73;
